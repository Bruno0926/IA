# Imports
import tensorflow as tf
from keras.models import Sequential
from keras.layers import Conv2D, MaxPooling2D, Flatten, Dense
from keras.preprocessing.image import ImageDataGenerator

# Versões do TensorFlow e Keras
print("Versão do TensorFlow:", tf.__version__)
print("Versão do Keras:", K.__version__)

# Inicializando a Rede Neural Convolucional
classifier = Sequential()

# Primeira Camada de Convolução
classifier.add(Conv2D(64, (3, 3), input_shape=(64, 64, 3), activation='relu'))
classifier.add(MaxPooling2D(pool_size=(2, 2)))

# Segunda Camada de Convolução
classifier.add(Conv2D(128, (3, 3), activation='relu'))
classifier.add(MaxPooling2D(pool_size=(2, 2)))

# Terceira Camada de Convolução
classifier.add(Conv2D(128, (3, 3), activation='relu'))
classifier.add(MaxPooling2D(pool_size=(2, 2)))

# Quarta Camada de Convolução
classifier.add(Conv2D(256, (3, 3), activation='relu'))
classifier.add(MaxPooling2D(pool_size=(2, 2)))

# Flattening
classifier.add(Flatten())

# Full connection
classifier.add(Dense(units=256, activation='relu'))
classifier.add(Dense(units=1, activation='sigmoid'))

# Compilando a rede
classifier.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

# Pré-processamento das imagens
train_datagen = ImageDataGenerator(rescale=1./255, shear_range=0.2, zoom_range=0.2, horizontal_flip=True)
validation_datagen = ImageDataGenerator(rescale=1./255)

training_set = train_datagen.flow_from_directory('dataset_treino', target_size=(64, 64), batch_size=32, class_mode='binary')
validation_set = validation_datagen.flow_from_directory('dataset_validation', target_size=(64, 64), batch_size=32, class_mode='binary')

# Treinamento da rede
classifier.fit_generator(training_set, steps_per_epoch=8000, epochs=5, validation_data=validation_set, validation_steps=2000)
